name: Test, Lint, and AWS Deploy

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ${{ github.ref == 'refs/heads/main' && 'banbury-mcp-server-prod' || 'banbury-mcp-server-dev' }}
  ECS_SERVICE: ${{ github.ref == 'refs/heads/main' && 'banbury-mcp-server-prod' || 'banbury-mcp-server-dev' }}
  ECS_CLUSTER: ${{ github.ref == 'refs/heads/main' && 'banbury' || 'banbury' }}
  ECS_TASK_DEFINITION: ${{ github.ref == 'refs/heads/main' && '.aws/deploy-prod.json' || '.aws/deploy-mcp-server-dev.json' }}
  CONTAINER_NAME: ${{ github.ref == 'refs/heads/main' && 'banbury-mcp-server-prod' || 'banbury-mcp-server-dev' }}

jobs:
  deploy:
    name: Deploy to AWS
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests (if available)
      run: |
        if [ -f "package.json" ] && grep -q '"test"' package.json; then
          npm test
        else
          echo "No tests found, skipping..."
        fi
      continue-on-error: true

    - name: Run linting (if available)
      run: |
        if [ -f "package.json" ] && grep -q '"lint"' package.json; then
          npm run lint
        else
          echo "No linting configured, skipping..."
        fi
      continue-on-error: true

    - name: Build TypeScript
      run: |
        if [ -f "tsconfig.json" ]; then
          npm run build || npx tsc
        else
          echo "No TypeScript configuration found, skipping build..."
        fi

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
